import java.util.*;
import java.util.Set;
import javax.validation.ValidationException;
import org.json.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import com.force.commons.sobject.accesscheck.OrgPreferenceE;
import com.force.commons.sobject.entities.*;
import com.force.commons.sobject.entities.fields.*;
import com.force.util.soql.SoqlOptions;
import com.force.util.soql.condition.*;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.salesforce.runtime.services.ui.label.service.LabelService;
import org.apache.commons.lang3.StringUtils;
import shared.common.api.AppVersion;
import ui.industries.common.api.data.DocumentChecklistItemResult;
import ui.industries.common.api.services.DocumentWorkspaceService;
import ui.services.LogService;
import ui.services.RecordService;
import ui.services.RecordService.SaveRecordResult;
import ui.services.api.records.query.LoadRecordListQueryFactory;
import ui.services.api.records.query.LoadRecordListUsingFieldsQuery;
import ui.services.composite.*;
import ui.services.connection.models.api.Field;
import ui.services.connection.models.api.PicklistEntry;
import ui.services.connection.models.api.Record;
import ui.services.connection.models.api.RecordTypeInfo;
import ui.services.enums.Mode;
import ui.services.exceptions.ServiceException;
import ui.services.models.RecordList;
import ui.services.utils.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.auraframework.components.ui.InputOption;
import com.force.commons.sobject.entities.fields.OcrTargetObjectStandardFields;
import com.sforce.soap.tooling.metadata.wsc.CustomValue;
import com.sforce.ws.ConnectionException;
import ui.setup.einstein.shared.api.ObjectService;

public class DocumentWorkspaceServiceImpl implements DocumentWorkspaceService {

@Autowired
private RecordUtils recordUtils;

@Autowired
private RecordService recordService;

@Autowired
public RecordFactory recordFactory;

@Autowired
private CompositeRecordService compositeRecordService;

@Autowired
private GackUtil gackUtil;

@Autowired
private LabelService labelService;

@Autowired
private LabelService labelService;

@Autowired
private LogService logService;

@Autowired
private ObjectService objectService;

@Autowired
private PermAndPrefUtil permAndPrefUtil;

public boolean hasLinkedEntityRecordsForRecordId(String recordId,String linkedEntity,String lookupFieldOnLinkedEntity) throws ServiceException {

    if (recordId == null || recordId.isEmpty()) {
                    return false;
    }

    List<StandardEntitiesBase> ocrValidEntities;

    try {
         ocrValidEntities = getWhiteListedEntities();
    } catch (ConnectionException x) {
         throw new RuntimeException(x);
    }

    Set<StandardEntitiesBase> set = new LinkedHashSet<>(getDciParentEntities());
    set.addAll(ocrValidEntities);
    set.add(StandardEntitiesR.ReceivedDocument);

    if(!(StandardEntitiesBase.isThisEntity(recordId, set)) && !recordUtils.getRecordInfoById(recordId).isCustom()) {
    logService.logErrorMessage(INCORRECT_RECORD_ID);
    throw new ServiceException(INCORRECT_RECORD_ID);

    RecordInfo recordInfo = recordUtils.getRecordInfoByApiName(linkedEntity);
    WhereCondition whereCondition = Condition.equalTo(lookupFieldOnLinkedEntity, recordId);
    List<Record> records = recordService.loadRecords(recordInfo, Mode.VIEW, QUERY_FIELDS, whereCondition, null,null, null, false, SoqlOptions.DONOT_ESCAPE_QUOTES_IN_IN);
    return records != null && !records.isEmpty();
}
}

public List<StandardEntitiesBase> getWhiteListedEntities() throws ServiceException, ConnectionException {
          List<StandardEntitiesBase> entities = Lists.newArrayList();
          if (permAndPrefUtil.isEnabled(OrgPreferenceE.EINSTEIN_DOC_READER_ENABLED)) {
             List<InputOption> inputValues = getTargetObjectsStream().map(cv -> new InputOption(cv.getLabel(), cv.getValueName(), cv.isDefault(), cv.getLabel())).collect(Collectors.toList());
             for (InputOption value : inputValues) {
              entities.add(StandardEntitiesBase.getFromApiName(value.getName()));
             }
         }
         return entities;
      }

      public Map<String,String> getDciParentEntitiesWithKeyPrefix() throws ServiceException {
              Map<String, String> dciParentEntitiesMap = new HashMap<String, String>();
                      try {
                          Field field = recordUtils.getEntityField(StandardEntitiesD.DocumentChecklistItem.getApiName(),DocumentChecklistItemStandardFields.ParentRecordId.getName());
                          for (String entityName : field.getReferenceToNames()) {
                              String keyPrefix = recordUtils.getEntityKeyPrefix(entityName);
                              dciParentEntitiesMap.put(keyPrefix, entityName);
                          }
                      }catch(Exception ex) {
                          logService.logErrorMessage("Error Occurred in DocumentWorkspaceServiceImpl.getDciParentEntitiesWithKeyPrefix" + ex.getMessage());
                      }
                      return dciParentEntitiesMap;
                  }

            @Override
            public String removeFileFromDocumentChecklistItem(String documentChecklistItemId) throws ServiceException {
                String removedState = "FAILED";
                if (documentChecklistItemId == null || documentChecklistItemId.isEmpty()) { return removedState; }
                if(!(StandardEntitiesBase.isThisEntity(documentChecklistItemId, StandardEntitiesD.DocumentChecklistItem))) {
                    logService.logErrorMessage(INCORRECT_RECORD_ID);
                    throw new ServiceException(INCORRECT_RECORD_ID);
                }

                // Get DCI record to update
                RecordInfo dciRecordInfo = recordUtils.getRecordInfoById(documentChecklistItemId);
                WhereCondition dciWhereCondition = Condition.equalTo(DocumentChecklistItemStandardFields.Id.getName(),
                        documentChecklistItemId);
                List<Record> documentChecklistItems = recordService.loadRecords(dciRecordInfo, Mode.VIEW, DCI_QUERY_FIELDS,dciWhereCondition, null, null, null, false, SoqlOptions.DONOT_ESCAPE_QUOTES_IN_IN);

                // Get ContentDocumentLink record to delete
                RecordInfo contentDocLinkRecordInfo = recordUtils.getRecordInfoByApiName(StandardEntitiesC.ContentDocumentLink.getApiName());
                WhereCondition whereCondition = Condition.equalTo(ContentDocumentLinkStandardFields.LinkedEntityId.getName(),
                        documentChecklistItemId);
                List<Record> contentDocLinkRecords = recordService.loadRecords(contentDocLinkRecordInfo, Mode.VIEW,
                        CONTENT_DOC_LINK_QUERY_FIELDS, whereCondition, null, Integer.valueOf(1), null, false,
                        SoqlOptions.DONOT_ESCAPE_QUOTES_IN_IN);

                // Remove received document and delete content document link
                if (documentChecklistItems != null && documentChecklistItems.size() == 1) {
                    if (contentDocLinkRecords == null || contentDocLinkRecords.size() == 0) {
                        removedState = "NO_FILE_TO_REMOVE";
                    } else {
                        Record dciRecord = documentChecklistItems.get(0);
                        dciRecord.put(DocumentChecklistItemStandardFields.ReceivedDocumentId.getName(), "");

                        CompositeRecordOperationBuilder builder = compositeRecordService.createBuilder(AppVersion.CURRENT,
                                true);
                        builder.update(dciRecord);
                        builder.delete(contentDocLinkRecords.get(0).getId(), contentDocLinkRecords.get(0).getApiName(),
                                AppVersion.CURRENT);
                        final List<CompositeOperationResult> compositeResults = compositeRecordService.execute(builder);
                        if (compositeResults != null && compositeResults.size() == 2 && compositeResults.get(0).isSuccess()
                                && compositeResults.get(1).isSuccess()) {
                            removedState = "SUCCESS";
                        }
                    }
                } else {
                    ValidationException validationException = new ValidationException(labelService.getLabel("Errors", "UnhandledExceptionError"));
                    gackUtil.sendLoggingOnlyGack("No DCI with Id " + documentChecklistItemId + " found",
                            validationException.getMessage(), validationException);
                }

                return removedState;
            }

            public Set<String> getTransformedPages(String recordId,String documentId) throws ServiceException {
                if(!(StandardEntitiesBase.isThisEntity(recordId, StandardEntitiesR.ReceivedDocument))) {
                    logService.logErrorMessage(INCORRECT_RECORD_ID);
                    throw new ServiceException(INCORRECT_RECORD_ID);
                }
                Set<String> transformedPages = new HashSet<String>();
                RecordInfo recordInfo = recordUtils.getRecordInfo(StandardEntitiesD.DocumentChecklistItem);
                Set<String> queryFields = Sets.newHashSet(DocumentChecklistItemStandardFields.Id.getName(),DocumentChecklistItemStandardFields.TransformationInfo.getName());
                WhereCondition whereCondition = Condition.equalTo("ReceivedDocumentId", recordId);

                List<Record> records = recordService.loadRecords(recordInfo, Mode.VIEW, queryFields, whereCondition, null,null, null, false, SoqlOptions.DONOT_ESCAPE_QUOTES_IN_IN);

                    if (records != null && !records.isEmpty()) {
                        records.forEach(record -> {
                            List<String> pages = parseTransformationInfo(
                                    record.get(DocumentChecklistItemStandardFields.TransformationInfo.getName()));
                            if (pages != null) {
                                transformedPages.addAll(pages);
                            }
                        });
                    }
                return transformedPages;
            }

@Override
     public DocumentChecklistItemResult createDocumentChecklistItem(String parentRecordId,String documentTypeId) throws ServiceException {
          RecordInfo recordInfo = recordUtils.getRecordInfoByApiName(StandardEntitiesD.DocumentChecklistItem.getApiName());
          Record documentChecklistRecord = recordFactory.createEmptyRecord(recordInfo);

          String documentChecklistItemName = getDocumentChecklistItemName(documentTypeId);
          documentChecklistRecord.put(DocumentChecklistItemStandardFields.Name, documentChecklistItemName);
          documentChecklistRecord.put(DocumentChecklistItemStandardFields.ParentRecordId, parentRecordId);
          if (StringUtils.isNotBlank(documentTypeId)) {
              documentChecklistRecord.put(DocumentChecklistItemStandardFields.DocumentTypeId, documentTypeId);
          }

          // This field is mapped to dynamic Enum, get the default value or set it to "New".
          documentChecklistRecord.put(DocumentChecklistItemStandardFields.Status, getStatusValue(recordInfo));

          // Save the DocumentChecklistItem record.
          SaveRecordResult result = recordService.saveRecord(documentChecklistRecord);
          return new DocumentChecklistItemResult(result.getRecordId(), documentChecklistItemName);
      }
}